### This file was generated by Nexus Schema
### Do not make changes to this file directly


type DistributedLibrary implements Library {
  administrator: Person!
  id: String!
  items: [Thing]!
  location: Location!
  name: String!
}

type Email {
  value: String!
}

type Lender {
  id: String!
}

interface Library {
  administrator: Person!
  id: String!
  items: [Thing]!
  location: Location!
  name: String!
}

type LibrarySearchResult {
  library: Library!
  things: [Thing]!
}

union Location = PhysicalArea | PhysicalLocation

enum LocationTypeEnum {
  Distributed
  Physical
  Virtual
}

type Person {
  emails: [Email!]!
  id: String!
  name: PersonName!
}

input PersonInput {
  id: String!
}

type PersonName {
  firstName: String!
  lastName: String!
  middleName: String
}

type PhysicalArea {
  centerPoint: PhysicalLocation!
  distance: Float!
}

type PhysicalLocation {
  apartment: String
  city: String
  country: String
  latitude: String
  longitude: String
  state: String
  streetAddress: String
  streetName: String
  zipcode: String
}

type Query {
  libraries: [Library!]!
  titleSearchResults(person: PersonInput!, searchRequest: TitleSearchRequest): [TitleSearchResult!]!
}

type SimpleLibrary implements Library {
  administrator: Person!
  id: String!
  items: [Thing]!
  location: Location!
  name: String!
}

type Thing {
  id: String!
  imageUrls: [String!]!
  owner: Lender!
  storageLocation: Location!
  title: ThingTitle!
}

type ThingTitle {
  description: String
  isbn: String
  name: String!
  upc: String
}

input TitleSearchRequest {
  searchText: String
}

type TitleSearchResult {
  libraryResults: [LibrarySearchResult]!
  title: ThingTitle!
}

type VirtualLocation {
  url: String
}